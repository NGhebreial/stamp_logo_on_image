def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def singingProp = new Properties()
def singingPropFile = rootProject.file('singing.properties')

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "nadia.ghebreial.stamplogoonimage"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    if (singingPropFile.exists()) {
        singingPropFile.withReader('UTF-8') { reader ->
            singingProp.load(reader)
        }
        signingConfigs {
            config {
                keyAlias singingProp.getProperty("keyAlias")
                keyPassword singingProp.getProperty("keyPassword")
                storeFile file(singingProp.getProperty("storeFile"))
                storePassword singingProp.getProperty("storePassword")
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.config

            //minifyEnabled true
            //useProguard true

            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.17.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    api 'androidx.fragment:fragment:1.0.0'
    api 'androidx.media:media:1.0.0'
    api 'androidx.core:core:1.0.0'
}
